{-# LANGUAGE StandaloneKindSignatures #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE PolyKinds #-}
{-# LANGUAGE UndecidableInstances #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE NoStarIsType #-} 
{-# LANGUAGE AllowAmbiguousTypes #-}
{-# LANGUAGE ConstraintKinds #-}
{-# OPTIONS_GHC -freduction-depth=0 #-}

module Day7 where
    
import Data.Type.Bool
import Data.Type.Equality
import Data.Proxy
import GHC.TypeLits
import Data.Type.Ord
import Data.List

type Distance a b = If (a <=? b) (b - a) (a - b)
type Distance2 a b = Summation (Distance a b)
type Summation a = Div (a * (a + 1))  2

type family Sum xs where
  Sum (x:xs) = x + Sum xs
  Sum '[] = 0

type family Sum2 acc xs where
  Sum2 acc (x:xs) = Sum2 (acc + x) xs
  Sum2 acc '[] = acc

type family CheckFuel acc n xs where
  CheckFuel acc n (x : xs) = CheckFuel (acc + Distance n x) n xs
  CheckFuel acc n '[] = acc

type family CheckPosition acc n max xs where
  CheckPosition acc max max xs = acc
  CheckPosition acc n max xs = CheckPosition (Min acc (CheckFuel 0 n xs)) (n + 1) max xs

type family MaxValue acc xs where
  MaxValue acc (x:xs) = If (x >=? acc) (MaxValue x xs) (MaxValue acc xs)
  MaxValue acc '[] = acc

type Solve1 input = (CheckPosition 9999999999 0 1 input)

exampleInput = [16,1,2,0,4,2,7,1,2,14]
--todo sort function

type family CheckFuel2 acc n xs where
  CheckFuel2 acc n (x : xs) = CheckFuel2 (acc + Distance2 n x) n xs
  CheckFuel2 acc n '[] = acc

type family CheckPosition2 acc n max xs where
  CheckPosition2 acc max max xs = acc
  CheckPosition2 acc n max xs = CheckPosition2 (Min acc (CheckFuel 0 n xs)) (n + 1) max xs


type Solve2 input = (CheckPosition2 9999999999 0 1 input)

--Call CheckFuel on median value
input = [0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,3,3,4,4,4,4,4,6,8,8,8,8,8,8,9,9,10,10,10,10,10,11,11,12,13,14,15,16,16,17,18,18,19,19,19,19,19,19,20,20,23,24,24,24,25,26,28,28,28,29,29,32,32,32,32,32,32,32,32,33,33,33,33,33,34,34,35,35,35,35,35,36,37,38,38,39,39,39,40,40,40,40,41,41,41,41,41,41,42,42,42,43,43,43,43,44,46,47,47,47,48,48,49,49,50,51,51,51,52,52,52,52,53,54,54,55,55,56,56,58,58,59,59,60,60,61,61,62,62,62,65,65,65,65,65,65,66,66,66,67,67,67,68,68,68,69,69,70,70,71,72,72,72,72,73,74,74,75,75,75,77,77,81,81,82,83,83,83,83,85,85,85,86,86,88,88,88,88,89,91,92,92,92,92,93,93,93,93,95,95,95,96,96,97,97,97,98,99,99,99,99,100,100,100,101,101,101,101,102,103,104,105,105,105,107,107,107,108,109,109,109,110,110,110,110,111,111,112,112,113,114,114,115,115,115,115,116,116,116,116,116,117,117,117,118,119,120,120,120,122,123,123,123,123,126,128,129,129,130,131,131,132,132,133,136,137,138,138,139,140,141,141,143,143,145,146,146,147,147,148,149,153,153,154,156,156,157,157,158,158,160,161,162,163,163,164,166,168,168,168,169,169,169,170,170,171,171,172,173,174,176,177,179,184,184,185,186,186,186,186,187,188,188,190,190,190,191,192,193,193,194,194,195,195,195,195,197,198,200,203,204,204,204,204,206,207,207,208,209,211,213,213,214,214,215,217,217,217,217,219,219,219,219,220,221,222,223,224,225,227,228,228,229,229,230,230,231,232,233,237,238,239,240,240,240,241,242,242,243,243,245,245,246,247,247,248,250,251,252,253,257,257,259,260,260,261,261,261,262,263,264,269,269,270,271,271,272,272,274,275,279,281,282,283,283,285,289,289,290,290,291,291,291,291,295,300,305,307,308,308,309,309,311,312,313,314,319,323,323,324,324,327,327,327,329,330,332,333,336,337,338,339,341,342,345,350,351,354,359,361,362,366,367,368,369,370,370,370,372,374,376,376,379,379,380,381,383,385,388,393,393,394,397,398,398,402,403,404,404,405,406,406,407,407,413,414,418,418,419,419,420,420,421,424,425,426,429,433,434,436,437,439,442,443,443,446,446,447,448,449,455,456,456,460,463,463,463,466,466,469,472,474,474,475,475,476,477,479,481,484,485,486,486,486,487,487,491,492,493,494,495,495,496,498,500,501,501,505,507,508,510,510,512,512,513,517,523,527,529,533,537,537,540,540,543,544,550,550,551,551,551,551,555,557,558,560,562,563,564,565,566,569,571,571,573,576,577,578,578,580,580,581,581,582,586,590,591,592,593,594,595,596,596,596,597,598,601,604,604,605,606,607,607,610,611,613,616,619,620,621,622,622,623,623,623,625,627,633,634,636,641,642,642,648,649,650,650,652,655,655,655,655,657,658,658,659,661,665,666,666,667,667,668,670,671,672,674,674,675,676,681,684,684,684,684,686,687,687,687,690,692,693,693,694,694,695,697,697,700,702,703,710,710,711,712,713,714,715,715,717,719,719,724,724,725,728,728,731,731,733,733,733,733,734,737,737,737,745,749,750,752,753,756,758,760,760,764,764,765,766,767,770,771,771,771,773,775,777,777,779,780,781,784,789,790,790,791,792,796,798,801,801,802,802,805,808,812,814,814,817,819,823,823,824,826,826,827,827,828,831,832,833,836,849,850,856,856,859,865,867,867,868,871,872,875,876,877,884,885,885,888,897,899,903,905,909,914,915,918,924,925,932,933,935,937,940,949,953,956,957,963,964,967,969,969,972,979,980,982,982,986,991,992,994,995,995,998,999,999,1000,1001,1005,1005,1008,1008,1012,1017,1030,1032,1032,1049,1049,1052,1055,1064,1067,1067,1069,1073,1075,1077,1078,1079,1090,1092,1094,1100,1101,1101,1102,1104,1106,1107,1109,1115,1116,1119,1122,1124,1126,1129,1135,1137,1143,1159,1162,1172,1176,1182,1184,1186,1187,1188,1188,1192,1193,1200,1201,1207,1209,1211,1225,1229,1234,1235,1242,1247,1253,1266,1276,1280,1299,1308,1308,1316,1317,1325,1330,1333,1339,1343,1345,1347,1349,1364,1377,1379,1385,1392,1400,1408,1409,1414,1415,1425,1430,1436,1442,1445,1451,1452,1458,1460,1461,1469,1475,1477,1481,1483,1496,1499,1504,1514,1517,1520,1523,1540,1562,1563,1566,1571,1576,1597,1600,1610,1633,1634,1637,1669,1696,1697,1710,1710,1716,1725,1737,1789,1796,1801,1826,1859]


summation x = x * (x + 1) `div` 2

checkFuel xs n = fmap (\x -> (abs $ n - x)) xs

checkFuel2 xs n = sum $ fmap (\x -> summation (abs $ n - x)) xs

average :: Integral a => [a] -> a
average xs = sum xs `div` (fromIntegral $ length xs)
